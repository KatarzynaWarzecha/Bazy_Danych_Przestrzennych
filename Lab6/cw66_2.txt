--create database cw6;
--create extension postgis_raster cascade;

--ładowanie backupu i zdjęć
--pg_restore.exe -h localhost -p 5432 -U postgres -d cw6  C:\postgis_raster.backup 
--raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d C:\rasters\srtm_1arc_v3.tif rasters.dem > C:\dem.sql
--raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d C:\rasters\srtm_1arc_v3.tif rasters.dem | psql -d postgis_raster -hlocalhost -U postgres -p 5432
--raster2pgsql.exe -s 3763 -N -32767 -t 128x128 -I -C -M -d C:\rasters\Landsat8_L1TP_RGBN.TIF rasters.landsat8 | psql -d cw6 -h localhost -U postgres -p 5432

--Zmiana nazwy schematu schema_name
--alter schema schema_name rename to k_warzecha;

--Przykład 1 - ST_Intersects
--Przecięcie rastra z wektorem.
--CREATE TABLE k_warzecha.intersects AS
--SELECT a.rast, b.municipality
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';

--1. dodanie serial primary key:
--alter table k_warzecha.intersects
--add column rid SERIAL PRIMARY KEY;
--2. utworzenie indeksu przestrzennego:
--CREATE INDEX idx_intersects_rast_gist ON k_warzecha.intersects
--USING gist (ST_ConvexHull(rast));
--3. dodanie raster constraints:
-- schema::name table_name::name raster_column::name
--SELECT AddRasterConstraints('schema_name'::name,
--'intersects'::name,'rast'::name);

--Przykład 2 - ST_Clip
--Obcinanie rastra na podstawie wektora.
--CREATE TABLE k_warzecha.clip AS
--SELECT ST_Clip(a.rast, b.geom, true), b.municipality
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE ST_Intersects(a.rast, b.geom) AND b.municipality like 'PORTO';

--Przykład 3 - ST_Union
--Połączenie wielu kafelków w jeden raster.
--CREATE TABLE k_warzecha.union AS
--SELECT ST_Union(ST_Clip(a.rast, b.geom, true))
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast);

--Przykład 1 - ST_AsRaster
--Przykład pokazuje użycie funkcji ST_AsRaster w celu rastrowania tabeli z parafiami o takiej samej
--charakterystyce przestrzennej tj.: wielkość piksela, zakresy itp.
--CREATE TABLE k_warzecha.porto_parishes AS
--WITH r AS (
--SELECT rast FROM rasters.dem
--LIMIT 1
--)
--SELECT ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767) AS rast
--FROM vectors.porto_parishes AS a, r
--WHERE a.municipality ilike 'porto';

--DROP TABLE k_warzecha.porto_parishes; --> drop table porto_parishes first
--CREATE TABLE k_warzecha.porto_parishes AS
--WITH r AS (
--SELECT rast FROM rasters.dem
--LIMIT 1
--)
--SELECT st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)) AS rast
--FROM vectors.porto_parishes AS a, r
--WHERE a.municipality ilike 'porto';

--Przykład 3 - ST_Tile
--Po uzyskaniu pojedynczego rastra można generować kafelki za pomocą funkcji ST_Tile.
--DROP TABLE k_warzecha.porto_parishes; --> drop table porto_parishes first
--CREATE TABLE k_warzecha.porto_parishes AS
--WITH r AS (
--SELECT rast FROM rasters.dem
--LIMIT 1 )
--SELECT st_tile(st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-
--32767)),128,128,true,-32767) AS rast
--FROM vectors.porto_parishes AS a, r
--WHERE a.municipality ilike 'porto';

--create table k_warzecha.intersection as
--SELECT
--a.rid,(ST_Intersection(b.geom,a.rast)).geom,(ST_Intersection(b.geom,a.rast)
--).val
--FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
--WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--CREATE TABLE k_warzecha.dumppolygons AS
--SELECT
--a.rid,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).geom,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).val
--FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
--WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--Przykład 1 - ST_Band
--Funkcja ST_Band służy do wyodrębniania pasm z rastra
--CREATE TABLE k_warzecha.landsat_nir AS
--SELECT rid, ST_Band(rast,4) AS rast
--FROM rasters.landsat8;

--CREATE TABLE k_warzecha.paranhos_dem AS
--SELECT a.rid,ST_Clip(a.rast, b.geom,true) as rast
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--CREATE TABLE k_warzecha.paranhos_slope AS
--SELECT a.rid,ST_Slope(a.rast,1,'32BF','PERCENTAGE') as rast
--FROM k_warzecha.paranhos_dem AS a;

--CREATE TABLE k_warzecha.paranhos_slope_reclass AS
--SELECT a.rid,ST_Reclass(a.rast,1,']0-15]:1, (15-30]:2, (30-9999:3',
--'32BF',0)
--FROM k_warzecha.paranhos_slope AS a;

--SELECT st_summarystats(a.rast) AS stats
--FROM k_warzecha.paranhos_dem AS a;

--SELECT st_summarystats(ST_Union(a.rast))
--FROM k_warzecha.paranhos_dem AS a;

--WITH t AS (
--SELECT st_summarystats(ST_Union(a.rast)) AS stats
--FROM k_warzecha.paranhos_dem AS a
--)
--SELECT (stats).min,(stats).max,(stats).mean FROM t;

--WITH t AS (
--SELECT b.parish AS parish, st_summarystats(ST_Union(ST_Clip(a.rast,
--b.geom,true))) AS stats
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
--group by b.parish
--)
--SELECT parish,(stats).min,(stats).max,(stats).mean FROM t;

--SELECT b.name,st_value(a.rast,(ST_Dump(b.geom)).geom)
--FROM
--rasters.dem a, vectors.places AS b
--WHERE ST_Intersects(a.rast,b.geom)
--ORDER BY b.name;

--create table k_warzecha.tpi30 as
--select ST_TPI(a.rast,1) as rast
--from rasters.dem a;

--CREATE INDEX idx_tpi30_rast_gist ON k_warzecha.tpi30
--USING gist (ST_ConvexHull(rast));

--SELECT AddRasterConstraints('schema_name'::name,
--'tpi30'::name,'rast'::name);

--create table k_warzecha.tpi30_porto as
--SELECT ST_TPI(a.rast,1) as rast
--FROM rasters.dem AS a, vectors.porto_parishes AS b
--WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';
--Dodanie indeksu przestrzennego:
--CREATE INDEX idx_tpi30_porto_rast_gist ON k_warzecha.tpi30_porto
--USING gist (ST_ConvexHull(rast));
--Dodanie constraintów:
--SELECT AddRasterConstraints('schema_name'::name,
--'tpi30_porto'::name,'rast'::name);

--Algebra map
--CREATE TABLE k_warzecha.porto_ndvi AS
--WITH r AS (
--SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
--FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
--WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
--)
--SELECT
--r.rid,ST_MapAlgebra(
--r.rast, 1,
--r.rast, 4,
--	'([rast2.val] - [rast1.val]) / ([rast2.val] +
--[rast1.val])::float','32BF'
--) AS rast
--FROM r;

--CREATE INDEX idx_porto_ndvi_rast_gist ON k_warzecha.porto_ndvi
--USING gist (ST_ConvexHull(rast));

--create or replace function k_warzecha.ndvi(
--value double precision [] [] [],pos integer [][],
--VARIADIC userargs text []
--)
--RETURNS double precision AS
--$$
--BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug purposes
--RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value
--[1][1][1]); --> NDVI calculation!
--END;
--$$
--LANGUAGE 'plpgsql' IMMUTABLE COST 1000;

--CREATE TABLE k_warzecha.porto_ndvi2 AS
--WITH r AS (
--SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
--FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
--WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
--)
--SELECT
--r.rid,ST_MapAlgebra(
--r.rast, ARRAY[1,4],
--'k_warzecha.ndvi(double precision[],
--integer[],text[])'::regprocedure, --> This is the function!
--'32BF'::text
--) AS rast
--FROM r;

--CREATE INDEX idx_porto_ndvi2_rast_gist ON k_warzecha.porto_ndvi2
--USING gist (ST_ConvexHull(rast));

SELECT ST_AsTiff(ST_Union(rast))
FROM k_warzecha.porto_ndvi;



MAP
NAME 'map'
SIZE 800 650
STATUS ON
EXTENT -58968 145487 30916 206234
UNITS METERS
WEB
METADATA
'wms_title' 'Terrain wms'
'wms_srs' 'EPSG:3763 EPSG:4326 EPSG:3857'
'wms_enable_request' '*'
'wms_onlineresource'
'http://54.37.13.53/mapservices/srtm'
END
END
PROJECTION
'init=epsg:3763'
END
LAYER
NAME srtm
TYPE raster
STATUS OFF
DATA "PG:host=localhost port=5432 dbname='postgis_raster'
user='sasig' password='postgis' schema='rasters' table='dem' mode='2'"
PROCESSING "SCALE=AUTO"
PROCESSING "NODATA=-32767"
OFFSITE 0 0 0
METADATA
'wms_title' 'srtm'
END
END
END